#!/usr/bin/env bash

HOST=127.0.0.1
PORT=8080

COLOR_DEFAULT="\e[39m"
COLOR_RESET="\033[0m"
COLOR_BASED="\e[39m"
COLOR_DANGER="\e[91m"
COLOR_WARNING="\e[93m"
COLOR_SUCCESS="\e[92m"
COLOR_SKY="\e[34m"

MENU=(
    "Start Apache"
    "Start MySQL"
    "-----------"
    "Stop Apache"
    "Stop MySQL"
)

OK="\u2714"
FAIL="\u2718"
COG="\u2699"

_spinner() {
    # $1 start/stop
    #
    # on start: $2 display message
    # on stop : $2 process exit status
    #           $3 spinner function pid (supplied from stop_spinner)

    local on_success="done"
    local on_fail="fail"
    local white="\e[1;37m"
    local green="\e[1;32m"
    local red="\e[1;31m"
    local nc="\e[0m"

    case $1 in
        start)
            # calculate the column where spinner and status msg will be displayed
            let column=$(tput cols)-${#2}-32
            # display message and position the cursor in $column column
            echo -ne "  ${2}"
            printf "%${column}s"

            # start spinner
            i=1
            sp='\|/-'
            delay=${SPINNER_DELAY:-0.2}

            while :
            do
                printf "\b${sp:i++%${#sp}:1}"
                sleep $delay
            done
            ;;
        stop)
            if [[ -z ${3} ]]; then
                echo "spinner is not running.."
                exit 1
            fi

            kill $3 > /dev/null 2>&1

            # inform the user uppon success or failure
            echo -en "\b["
            if [[ $2 -eq 0 ]]; then
                echo -en "${green}${OK}${nc}"
            else
                echo -en "${red}${FAIL}${nc}"
            fi
            echo -e "]"
            ;;
        *)
            echo "invalid argument, try {start/stop}"
            exit 1
            ;;
    esac
}

start_spinner() {
    # $1 : msg to display
    _spinner "start"      "${1}" &
    # set global spinner pid
    _sp_pid=$!
    disown
}

stop_spinner() {
    # $1 : command exit status
    _spinner "stop" $1 $_sp_pid
    unset _sp_pid
}

banner() {
    if [ $1 == "enable" ]; then
        echo -e "
  ╭────────────────────╮
  │  ${COG} Enable Service  │
  ╰────────────────────╯
  "
    else
        echo -e "
  ╭─────────────────────╮
  │  ${COG} Disable Service  │
  ╰─────────────────────╯
  "
    fi
}

service() {
    if sv-${1} ${2}; then
        stop_spinner $?
    else
        stop_spinner $?
    fi
}

runService() {
    banner ${1}
    start_spinner "· ${2} ${COLOR_WARNING}${3}${COLOR_DEFAULT} Service"
    sleep 1s
    service ${1} ${4}
}

response() {
    if curl -I ${1} &>/dev/null; then
        PROTOCOL=`curl -I ${1} 2> /dev/null | sed -n 1p | awk '{printf $1}'`
        STATUS=`curl -I ${1} 2> /dev/null | sed -n 1p | awk '{printf $2}'`
        SERVER=`curl -I ${1} 2> /dev/null | sed -n 3p | awk '{print $2" "$3}'`
        CONTENT=`curl -I ${1} 2> /dev/null | grep Content-Type: | awk '{printf $2" "$3}'`

        echo -e "
  ╭─ LAMP CHECK ───────────────────────────────────╮"
        echo -e "  │                                                │"
    
        echo -e "  │  Request URL: http://${HOST}:${PORT}            │"
        echo -e "  │                                                │"
        printf "  │  %-11s  %-8s  %-21s  │\n" "PATH" "Header" "Value"
        printf "  │  %-11s  %-8s  %-20s  │\n" "───────────" "────────" "─────────────────────"
        echo -e "  │                                                │"

        printf "  │  %-11s  %-8s  %-21s  │\n" ${2} "Protocol" ${PROTOCOL}

        if [[ ${STATUS} == "200" ]]; then
            printf "  │  %-10s   %-8s  ${COLOR_SUCCESS}%-23s${COLOR_DEFAULT}│\n" "" "Status" "${STATUS} OK"
        elif [[ ${STATUS} == "301" ]]; then
            printf "  │  %-10s   %-8s  ${COLOR_SUCCESS}%-23s${COLOR_DEFAULT}│\n" "" "Status" "${STATUS} Moved Permanently"
        elif [[ ${STATUS} == "403" ]]; then
            printf "  │  %-10s   %-8s  ${COLOR_DANGER}%-23s${COLOR_DEFAULT}│\n" "" "Status" "${STATUS} Forbidden"
        fi

        echo -e "  │               Server    ${SERVER}   │"
        echo -e "  │                                                │"
        echo -e "  ╰────────────────────────────────────────────────╯\n"
    else
        echo -e "
  ╭──────────────────╮
  │  Server Stopped  │
  ╰──────────────────╯
  "
    fi
}

check_mysql() {
    if pgrep -x "mysqld" > /dev/null; then
        echo -e "
  ╭────────────────────────────╮
  │  MySQL is Active           │
  ╰────────────────────────────╯
  "
    else
        echo -e "
  ╭────────────────────────────╮
  │  MySQL is Inactive         │
  ╰────────────────────────────╯
  "
    fi
}

switchCase() {
    read -p "  ${1}: " SWITCH_CASE
    SWITCH_CASE=$(printf "%02d" ${SWITCH_CASE})

    case "$SWITCH_CASE" in
        "01" )
            if [ -f $PREFIX/var/run/apache2/httpd.pid ]; then
                rm $PREFIX/var/run/apache2/httpd.pid
            fi
            runService "enable" "Start" "Apache" "httpd"
            ;;
        "02" )
            runService "enable" "Start" "MySQL" "mysqld"
            ;;
        "04" )
            runService "disable" "Stop" "Apache" "httpd"
            ;;
        "05" )
            runService "disable" "Stop" "MySQL" "mysqld"
            ;;
        * )
            echo "Invalid option. Please choose a valid number."
            ;;
    esac
}

menu() {
    response "http://${HOST}:${PORT}/" "/"
    check_mysql
    echo "MENU:"
    echo "-----"

    for (( i=0; i<${#MENU[@]}; i++ )); do
        INDEX=$(printf "%02d" $((i + 1)))
        echo "$INDEX) ${MENU[$i]}"
    done

    echo ""
    
    
}

menu
switchCase "Choose"
